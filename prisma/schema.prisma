// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for tracking the status of a payment
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

// User model, designed to be synced with Clerk
// The 'id' for this model will be the User ID from Clerk
model User {
  // The 'id' is a String and is NOT auto-generated by the database.
  // It will be provided by Clerk via webhooks.
  id               String    @id
  email            String    @unique
  username         String?   @unique // Username is optional in Clerk, so it's nullable here.
  name             String?   // For the user's full name (e.g., "John Doe")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // A user can have many optimization jobs
  optimizationJobs OptimizationJob[]
  // A user can make many payments
  payments         Payment[]
}

model OptimizationJob {
  id               String    @id @default(cuid())
  originalText     String    @db.Text // Use @db.Text for potentially long strings
  optimizedJson    Json?
  targetRole       String
  selectedTemplate String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // --- Relations ---

  // Many-to-one relation: Many jobs belong to one user.
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // One-to-one relation: One job has one payment.
  paymentId        String?   @unique
  payment          Payment?  @relation(fields: [paymentId], references: [id])
}

model Payment {
  id               String         @id @default(cuid())
  amount           Float
  status           PaymentStatus  @default(PENDING)
  easebuzzTxnId    String         @unique // The unique transaction ID from Easebuzz
  paymentDetails   Json?          // Stores the full response from Easebuzz for auditing
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // --- Relations ---

  // Many-to-one relation: Many payments can be made by one user.
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Back-relation to the OptimizationJob.
  optimizationJob  OptimizationJob?
}